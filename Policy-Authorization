creat policy
make:policy QuestionPolicy --model=Question

app/polices\questionpolicy

class QuestionPolicy
{
    use HandlesAuthorization;

 
    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Question  $question
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function update(User $user, Question $question)
    {
        return $user->id === $question->user_id;
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\Question  $question
     * @return \Illuminate\Auth\Access\Response|bool
     */
    public function delete(User $user, Question $question)
    {
        return $user->id === $question->user_id && $question->answer < 1;pu
    }

    
}

authservice provider 
class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array
     */
    protected $policies = [
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',

        Question::class => QuestionPolicy::class,
    ];

    /**
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
       //
    }
}

question controller 

   public function edit(Question $question)
    {
        $this->authorize('update',$question);
        return view('questions.edit', compact('question'));
        


        // if (Gate::denies('update-question', $question)){
        //     abort(403, "You can't Access this page");
        // } 
    }
 public function update(AskQuestionRequest $request, Question $question)
    {
        $this->authorize('update',$question);
        $question->update($request->only(
            'title', 'body',
        ));
        return redirect()->route('questions.index')->with('success',"Your questions has been update");
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Question  $question
     * @return \Illuminate\Http\Response
     */
    public function destroy(Question $question)
    {
        $this->authorize('update', $question);
        $question->delete();
        return redirect()->route('questions.index')->with('success','Question has been remove');
    
        
